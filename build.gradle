//------------------------------------------------------------------------------
// Plugin Configuration
//------------------------------------------------------------------------------

import com.github.sherter.googlejavaformatgradleplugin.GoogleJavaFormat

plugins {
    id 'java'
    id 'com.github.sherter.google-java-format' version '0.9'

}

//------------------------------------------------------------------------------
// Project Properties and Formatting
//------------------------------------------------------------------------------

Properties props = new Properties()
file('config.properties').withInputStream { props.load(it) }

googleJavaFormat {
    toolVersion = '1.17.0'
}

group 'cornell.cs.db'
version props["DELIVERABLE"]

//------------------------------------------------------------------------------
// Source Sets Configuration
//------------------------------------------------------------------------------

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
    test {
        java {
            srcDirs = ['src/test/unit/java']
        }
        resources {
            srcDirs = ['src/test/unit/resources']
        }
    }
    integrationTest {
        java {
            srcDirs = ['src/test/integration/java']
        }
        resources {
            srcDirs = ['src/test/integration/resources']
        }
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
    performanceTest {
        java {
            srcDirs = ['src/test/performance/java']  // Matches your performance test location
        }
        resources {
            srcDirs = ['src/test/performance/resources']
        }
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

//------------------------------------------------------------------------------
// Repository Configuration
//------------------------------------------------------------------------------

repositories {
    mavenCentral()
}

//------------------------------------------------------------------------------
// Test Configuration Extensions
//------------------------------------------------------------------------------

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
    performanceTestImplementation.extendsFrom testImplementation
    performanceTestRuntimeOnly.extendsFrom testRuntimeOnly
}

//------------------------------------------------------------------------------
// Dependencies
//------------------------------------------------------------------------------

dependencies {
    // JSQLParser
    implementation group: 'com.github.jsqlparser', name: 'jsqlparser', version: '5.0'

    // Log4j
    implementation 'org.apache.logging.log4j:log4j-api:2.20.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.20.0'

    // Junit 5
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.11.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.11.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.11.0'

    // Mockito dependencies for JUnit 5
    testImplementation 'org.mockito:mockito-core:5.13.0' 
    testImplementation 'org.mockito:mockito-junit-jupiter:5.13.0'
}

//------------------------------------------------------------------------------
// Test Task Configuration
//------------------------------------------------------------------------------
// Integration Test Task
tasks.register('integrationTest', Test) {
    description = 'Runs integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath

    useJUnitPlatform()
}

// Performance Test Task
tasks.register('performanceTest', Test) {
    description = 'Runs performance tests.'
    group = 'verification'

    testClassesDirs = sourceSets.performanceTest.output.classesDirs
    classpath = sourceSets.performanceTest.runtimeClasspath

    useJUnitPlatform()
}

// Combined Test Task
tasks.register('testAll') {
    description = 'Runs all tests including unit, integration, and performance tests'
    group = 'verification'
    dependsOn test, integrationTest, performanceTest
}

// Unit Test Configuration
test {
    useJUnitPlatform()
}

tasks.test {
    useJUnitPlatform {
        excludeTags 'performanceTest'
    }
}

//------------------------------------------------------------------------------
// Build and Format Configuration
//------------------------------------------------------------------------------

build {
    dependsOn verifyGoogleJavaFormat
}

assemble {
    dependsOn verifyGoogleJavaFormat
}

tasks.register('format', GoogleJavaFormat) {
    source sourceSets*.allJava
    include '**/*.java'
}

tasks.withType(JavaCompile).configureEach {
    options.release = 21
}


//------------------------------------------------------------------------------
// JAR Configuration
//------------------------------------------------------------------------------

jar {
    manifest {
        attributes 'Implementation-Title': 'Cornell DB Practicum',
                'Implementation-Version': version,
                'Main-Class': 'compiler.Compiler',
                'Multi-Release': 'true'
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

